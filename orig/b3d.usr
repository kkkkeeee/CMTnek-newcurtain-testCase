C-----------------------------------------------------------------------
      include "cmtparticles.usrp"
C  nek5000 user-file template
C
C  user specified routines:
C     - userbc : boundary conditions
C     - useric : initial conditions
C     - uservp : variable properties
C     - serf  : local acceleration term for fluid
C     - userq  : local source term for scalars
C     - userchk: general purpose routine for checking errors etc.
C
C-----------------------------------------------------------------------
      subroutine uservp(ix,iy,iz,eg) ! set variable properties
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      include 'CMTDATA'

      integer e,f,eg
c     e = gllel(eg)

      udiff  = 0.0
      utrans = 0.0
      mu = 0.0
      nu_s = 0.0
      lambda = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine entropy_viscosity
      include 'SIZE'
      return
      end
c-----------------------------------------------------------------------
      subroutine userflux
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE' ! probably want to start following nek convention
                       ! and use this routine pointwise
      real fluxout(lx1*lz1)
      integer e,f,eg
c     e = gllel(eg)
      do i=1,nx1*nz1
         fluxout(i)=0.0 ! adiabatic
      enddo
      return
      end
c-----------------------------------------------------------------------
      subroutine cmt_userEOS(ix,iy,iz,eg)
      include 'SIZE'
      include 'NEKUSE'
      include 'PARALLEL'
      include 'CMTDATA'
      include 'PERFECTGAS'

      integer e,eg
      e=gllel(eg)

      cp=cpgref
      cv=cvgref
      temp=e_internal/cv
      asnd=MixtPerf_C_GRT(gmaref,rgasref,temp)
      pres=MixtPerf_P_DRT(rho,rgasref,temp)

      return
      end
c-----------------------------------------------------------------------
      subroutine userf(ix,iy,iz,eg) ! set acceleration term
c
c     Note: this is an acceleration term, NOT a force!
c     Thus, ffx will subsequently be multiplied by rho(x,t).
c
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      ffx = 0.0
      ffy = 0.0
      ffz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq(ix,iy,iz,eg) ! set source term
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      qvol   = 0.0
      return
      end
c-----------------------------------------------------------------------
      subroutine userbc(ix,iy,iz,f,eg) ! set up boundary conditions

c     NOTE: This routine may or may not be called by every processor

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      include 'CMTDATA'
      include 'PERFECTGAS'


      integer e,f,eg

      flux=0.0
      molarmass=molmass
      phi=1.0
      cp=cpgref
      cv=cvgref
      ux=0.0
      uy=0.0
      uz=0.0
      temp = 293.0
      rho = temp
      pres=MixtPerf_P_DRT(rho,rgasref,temp)
      t0in=MixtPerf_To_CpTUVW(cpgref,temp,ux,uy,uz)
      p0in=MixtPerf_Po_GPTTo(gmaref,pres,temp,t0in)
      asnd=MixtPerf_C_GRT(gmaref,rgasref,temp)

      !cp = 293 - from previous code

      return
      end
c-----------------------------------------------------------------------
      subroutine useric(ix,iy,iz,eg) ! set up initial conditions
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      include 'CMTDATA'
      include 'PERFECTGAS'

      integer e,eg, eqnum
      real r,r2
      real bvort,uxinf,uyinf,tempinf
      common /VORTXSTRN/ bvort,uxinf,uyinf,tempinf

      xctr = 5.0!22.50
      yctr = 0.0!2.5
      x=x-xctr
      y=y-yctr
      r=sqrt(x**2+y**2)
      r2=(x**2+y**2)
      bvort = 0.0
      pi = 4.0*atan(1.0)
      phi= 1.0
      uxinf = 2.0
      uyinf = 0.0
      Tempinf = 1.0
      varsic(1) = phi*(Tempinf-(gmaref-1.0)*bvort**2/(16.0*gmaref
     >           *pi**2)* exp(2.0*(1.0-r2)))**(1.0/(gmaref-1.0))
      varsic(2) = varsic(1)*(uxinf-bvort*exp((1.0-r2))*y/(2.0*pi))
      varsic(3) = varsic(1)*(uyinf+bvort*exp((1.0-r2))*x/(2.0*pi))
      varsic(4) = 0.0
      varsic(5) = varsic(1)**gmaref/(gmaref-1.) +
     >            0.5*(varsic(2)**2+varsic(3)**2+varsic(4)**2)/varsic(1)
      rho= varsic(1)/phi
      temp=Tempinf-(gmaref-1.0)*bvort**2/(16.0*gmaref*pi**2)*
     >           exp(2.0*(1.0-r2))
      pres=MixtPerf_P_DRT(rho,rgasref,temp)
      ux = 0 ! varsic(2)/varsic(1)
      uy = 0 ! varsic(3)/varsic(1)
      uz = 0 ! varsic(4)/varsic(1)
      cp=cpgref
      cv=cvgref

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk()
      include 'SIZE'
      include 'TOTAL'
      include 'CMTDATA'

      include 'PT_TIMERS'

      if (istep .eq. 1)  then
         scrt_timers(IJFLUI) = dnekclock()
      endif
c     time = time_cmt
c     dt = dt_cmt

      ifxyo = .true.
      if (istep.gt.1)ifxyo=.false.

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat()   ! This routine to modify element vertices
      include 'SIZE'
      include 'TOTAL'
      include 'CMTBCDATA'
      include 'CMTDATA'
      include 'CMTTIMERS'
      include 'PERFECTGAS'

      molmass    = 8314.3
      muref      = 0.0
      coeflambda = -2.0/3.0
      suthcoef   = 1.0
      reftemp    = 1.0
      prlam      = 0.72
      pinfty     = 1.0
      gmaref     = 1.4
      rgasref    = MixtPerf_R_M(molmass,dum)
      cvgref     = rgasref/(gmaref-1.0)
      cpgref     = MixtPerf_Cp_CvR(cvgref,rgasref)
      gmaref     = MixtPerf_G_CpR(cpgref,rgasref)

      res_freq  = 5000000
      flio_freq = 10000

      NCUT  = int(lx1/2)
      NCUTD = lxd
      wght  = 0.2
      wghtd = 0.2

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2()  ! This routine to modify mesh coordinates
      include 'SIZE'
      include 'TOTAL'
      include 'CMTBCDATA'
      include 'CMTDATA'

      !call fix_geom

      outflsub=.false.
      IFRESTART=.false.
      IFCNTFILT=.false.
      ifsip=.false.
      gasmodel=1

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3()
      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
      subroutine cmt_usrflt(rmult)
      include 'SIZE'
      real rmult(nx1)
      real alpfilt
      integer sfilt, kut
      real eta, etac

      call rone(rmult,nx1)

      alpfilt=36.0 ! H&W 5.3

      kut=max((nx1/2),nx1-2)
      kut=nx1/2

      sfilt=8
      etac=real(kut)/real(nx1)
      do i=kut,nx1
         eta=real(i)/real(nx1)
         rmult(i)=exp(-alpfilt*((eta-etac)/(1.0-etac))**sfilt)
      enddo
      return
      end

